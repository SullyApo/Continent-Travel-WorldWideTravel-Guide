üìÅ services/api/chat.py
import streamlit as st
import requests
import os
from dotenv import load_dotenv
from models.chat import ChatSession, ChatMessage

load_dotenv()
BACKEND_API_URL = os.getenv("BACKEND_API_URL")

def send_message_to_backend(message: str) -> str:
    try:
        user_id = st.session_state.get('user', {}).get('id', 'anonymous')
        response = requests.post(
            f"{BACKEND_API_URL}/api/chat",
            json={
                "user_id": user_id,
                "message": message
            },
            headers={"Authorization": f"Bearer {st.session_state.get('auth_token')}"}
        )
        response.raise_for_status()
        return response.json().get("response", "Pas de r√©ponse re√ßue")
    except requests.exceptions.RequestException as e:
        return f"Erreur de connexion backend : {str(e)}"

def get_chat_history(user_id: str) -> ChatSession:
    try:
        response = requests.get(
            f"{BACKEND_API_URL}/api/chat/history",
            params={"user_id": user_id},
            headers={"Authorization": f"Bearer {st.session_state.get('auth_token')}"}
        )
        response.raise_for_status()
        return ChatSession.from_dict(response.json())
    except requests.exceptions.RequestException:
        return ChatSession(id="", user_id=user_id, created_at=None, messages=[])
üìÅ services/database/user_db.py

import json
import os
from pathlib import Path
from models.user import User

DB_PATH = Path("local_db/user_db.json")

class UserDB:
    def __init__(self):
        self._ensure_db_exists()
    
    def _ensure_db_exists(self):
        os.makedirs(DB_PATH.parent, exist_ok=True)
        if not DB_PATH.exists():
            with open(DB_PATH, 'w') as f:
                json.dump({"users": []}, f)
    
    def get_user_by_email(self, email: str) -> User:
        with open(DB_PATH, 'r') as f:
            data = json.load(f)
        
        for user_data in data["users"]:
            if user_data["email"] == email:
                return User.from_dict(user_data)
        return None
    
    def add_user(self, user: User) -> bool:
        data = {"users": []}
        if DB_PATH.exists():
            with open(DB_PATH, 'r') as f:
                data = json.load(f)
        
        # V√©rifier si l'utilisateur existe d√©j√†
        if any(u["email"] == user.email for u in data["users"]):
            return False
        
        data["users"].append(user.to_dict())
        with open(DB_PATH, 'w') as f:
            json.dump(data, f, indent=2)
        return True
