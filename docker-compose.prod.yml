version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: builder  # Utilise le builder pour la prod
    image: chatbot-api:prod
    restart: unless-stopped
    environment:
      - ENV=production
      - DB_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@db:5432/chatbot
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - RASA_URL=http://rasa:5005/webhooks/rest/webhook
      - AVIATIONSTACK_API_KEY=${AVIATIONSTACK_API_KEY}
      - BOOKING_API_KEY=${BOOKING_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=chatbot
    volumes:
      - db_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s

  rasa:
    image: rasa:2.8.0-full
    volumes:
      - ./rasa:/app
    ports:
      - "5005:5005"
    environment:
      - RASA_API_TOKEN=${RASA_TOKEN}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 1G

volumes:
  db_data:
    driver: local
  redis_data:

networks:
  default:
    driver: bridge
    name: chatbot-network